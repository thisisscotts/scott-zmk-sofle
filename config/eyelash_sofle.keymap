#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

// Custom includes
#include "key_labels.h"

// Mouse/scroll globals 
&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;     // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <1500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

// Homerow mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH4 LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3 RH4

#define TAPPING_TERM 280 // tested down to 200ms. Now reset to original 280
#define QUICK_TAP_MS 175

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };
};

// Combos

#define COMBO_TM_FAST 28
#define COMBO_TM_SLOW 60
#define PRIOR_IDLE 125

/ {
    combos {
        compatible = "zmk,combos";
        // Layers
        combo_tolayer0 {
            timeout-ms = <COMBO_TM_SLOW>;
            key-positions = <LH0 RH0>;
            bindings = <&to 0>;
        };
        combo_tolayer1 {
            timeout-ms = <COMBO_TM_SLOW>;
            key-positions = <LH1 RH1>;
            bindings = <&to 1>;
        };
        combo_tolayer2 {
            timeout-ms = <COMBO_TM_SLOW>;
            key-positions = <LH0 RH1>;
            bindings = <&to 2>;
        };
        combo_tolayer3 {
            timeout-ms = <COMBO_TM_SLOW>;
            key-positions = <LH1 RH0>;
            bindings = <&to 3>;
        };
        // Navigation
        combo_home {
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            key-positions = <LM3 LM2>;
            bindings = <&kp HOME>;
        };
        combo_end {
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            key-positions = <RM2 RM3>;
            bindings = <&kp END>;
        };
        combo_delete {
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            key-positions = <LM2 LM1>;
            bindings = <&kp DELETE>;
        };
        combo_refresh {
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            key-positions = <LT3 LT2>;
            bindings = <&kp F5>;
        };
        combo_esc {
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            key-positions = <RT2 RT3>;
            bindings = <&kp ESC>;
        };
        // Symbols
        combo_l_curly { //                          {
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;  
            key-positions = <LT2 LT1>;
            bindings = <&kp LBRC>;
        };
        combo_r_curly { //                          }
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            key-positions = <RT1 RT2>;
            bindings = <&kp RBRC>;
        };
        combo_l_bracket { //                        [
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            key-positions = <LB3 LB2>;
            bindings = <&kp LBKT>;
        };
        combo_r_bracket { //                        ]
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            key-positions = <RB2 RB3>;
            bindings = <&kp RBKT>;
        };
        combo_equals { //                           =
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            key-positions = <RB1 RB2>;
            bindings = <&kp EQUAL>;
        };
        combo_plus { //                             +
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            key-positions = <LB2 LB1>;
            bindings = <&kp PLUS>;
        };
        combo_minus { //                            -
            timeout-ms = <COMBO_TM_FAST>;
            require-prior-idle-ms = <PRIOR_IDLE>;
            key-positions = <RM1 RM2>;
            bindings = <&kp MINUS>;
        };
    };
};

// Tap dances

/ {
    behaviors {
		tdl0: tap_dance_lyr_0 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <300>;
			bindings = <&none>, <&to 0>;
		};
		tdl1: tap_dance_lyr_1 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <300>;
			bindings = <&mo 1>, <&to 1>, <&to 2>, <&to 3>;
		};
		tdl2: tap_dance_lyr_2 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <300>;
			bindings = <&mo 2>, <&to 2>;
		};
    };
};

// Macros

/ {
    macros {
        pers_email: pers_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings
                = <&macro_tap &kp T &kp H &kp I &kp S &kp DOT &kp I &kp S &kp DOT &kp S &kp C &kp O &kp T &kp T &kp S &kp DOT &kp E &kp M &kp A &kp I &kp L &kp DOT &kp A &kp D &kp D &kp R &kp E &kp S &kp S &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
        };
        work_email: work_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings
                = <&macro_tap &kp S &kp C &kp O &kp T &kp T &kp M &kp O &kp R &kp G &kp A &kp N &kp AT &kp C &kp H &kp E &kp V &kp R &kp O &kp N &kp DOT &kp C &kp O &kp M >;
        };
    };
};


/ {

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESC     	&kp N1          &kp N2          &kp N3          &kp N4          &kp N5          &kp UP			&kp N6         &kp N7			&kp N8       	&kp N9          &kp N0         &kp MINUS
&kp TAB     	&kp Q           &kp W           &kp E           &kp R           &kp T           &kp DOWN		&kp Y          &kp U			&kp I        	&kp O           &kp P          &kp BSLH
&kp CAPS    	&hml LGUI A 	&hml LALT S 	&hml LSHFT D    &hml LCTRL F    &kp G           &kp LEFT		&kp H          &hmr RCTRL J		&hmr RSHFT K 	&hmr RALT L 	&hmr RGUI SEMI &kp APOS
&kp LSHFT   	&kp Z           &kp X           &kp C           &kp V           &kp B           &kp RIGHT		&kp N          &kp M			&kp COMMA    	&kp DOT         &kp FSLH       &kp ENTER
&kp C_MUTE  	&kp LCTRL       &kp LGUI	    &kp LALT    	&tdl1           &kp BSPC		&kp ENTER		&kp SPACE      &tdl2			&trans       	&kp RSHFT		&kp DEL
            >;

            display-name = "LAYER0";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer_1 {
            bindings = <
&kp TILDE   	&kp F1          &kp F2          &kp F3          &kp F4          &kp F5			&mmv MOVE_UP     &kp F6         &kp F7          &kp F8      	&kp F9          &kp F10			&trans
&kp LC(C)   	&kp GRAVE       &kp PG_UP       &kp UP          &kp PG_DN       &mkp MB4        &mmv MOVE_DOWN   &trans         &kp N7          &kp N8      	&kp N9          &trans			&kp EQUAL
&kp LC(V)   	&kp TILDE       &kp LEFT        &kp DOWN        &kp RIGHT       &mkp MB5        &mmv MOVE_LEFT   &trans         &kp N4          &kp N5      	&kp N6          &trans			&trans
&kp ENTER   	&trans          &trans          &trans          &trans          &trans          &mmv MOVE_RIGHT  &trans         &kp N1          &kp N2      	&kp N3          &trans			&trans
&kp C_MUTE  	&trans          &trans          &trans          &tdl0 		    &kp SPACE       &mkp LCLK        &trans         &kp N0          &kp DOT     	&trans          &trans
            >;

            display-name = "LAYER1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp GRAVE       &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2	&bt BT_SEL 3    &bt BT_SEL 4    &trans      	&kp F6          &kp F7          &kp F8      	&kp F9      	&kp F10      	&trans
&trans          &bt BT_CLR      &bt BT_CLR_ALL  &trans			&rgb_ug RGB_HUI &rgb_ug RGB_HUD &trans      	&trans          &trans          &kp F11     	&kp F12     	&kp UNDER    	&kp PLUS
&out OUT_USB    &out OUT_BLE    &trans          &trans			&rgb_ug RGB_SPI &rgb_ug RGB_SPD &trans      	&trans          &trans          &work_email 	&pers_email 	&kp LBRC     	&kp RBRC
&rgb_ug RGB_OFF &rgb_ug RGB_ON  &rgb_ug RGB_EFF &rgb_ug RGB_EFR	&rgb_ug RGB_BRI &rgb_ug RGB_BRD &trans      	&trans          &trans          &trans      	&trans      	&trans       	&trans
&trans          &trans          &trans          &trans			&tdl0           &trans			&trans      	&trans          &trans          &sys_reset  	&soft_off   	&bootloader
            >;

            display-name = "LAYER2";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&kp ESC     	&kp N1          &kp N2           &kp N3			&kp N4			&kp N5			&kp UP_ARROW	&kp N6     		&kp N7			&kp N8 			&kp N9           &kp N0			&kp MINUS
&kp TAB     	&kp Q           &kp W            &kp E			&kp R			&kp T			&kp DOWN_ARROW	&kp Y      		&kp U			&kp I			&kp O            &kp P			&kp BSLH
&kp CAPS    	&kp A           &kp S            &kp D 			&kp F 			&kp G			&kp LEFT_ARROW	&kp H      		&kp J			&kp K			&kp L            &kp SEMI		&kp APOS
&kp LSHFT   	&kp Z           &kp X            &kp C			&kp V 			&kp B			&kp RIGHT_ARROW	&kp N      		&kp M			&kp COMMA		&kp DOT          &kp FSLH		&kp ENTER
&kp C_MUTE  	&kp LCTRL       &kp LEFT_GUI     &kp LEFT_ALT	&tdl0			&kp BACKSPACE	&kp ENTER		&kp SPACE  		&tdl0			&trans			&kp RIGHT_SHIFT  &kp DELETE
            >;

            display-name = "LAYER3";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };
    };
};
